html><head>
    <title>Narrative Project</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/vega-tooltip/0.4.2/vega-tooltip.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
</head>
  
  <body onload='init()'>
    <nav class="navbar navbar-default navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
          <a class="navbar-brand">Carbon Footprint</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li><a href="ProjectWithNavigation.html">Total GHG and Total population</a></li>
            <li><a href="barchart2.html">Different contributors to GHG emissions</a></li>
            <li class="active"><a>Total GHG growth in 20 years</a></li>
          </ul>
        </div>
      </div>
    </nav>
  
  
    <div class="container">
      <br>
      <br>
      <div class="page-header">
        <h1></h1>
      </div>
      <p class="lead">
       In this view, we can see the trend in the GHG emissions over a 20 year period.
      </p>
      <br>
      <div id="scatter">
        <svg width=1200 height=800>
            <g class="scatterplot"></g>
            <g class="slider"></g>
        </svg>
    </div>
    <div><p id="analysis">
        From the dataset we can see that for most of the countries the Carbon Footprint has increased. Though, for some countries like Andorra the GHG emissions has decreased.
        <strong>Change the country from the drop down list to see the change for the country you are interested in.   
        </strong>

    </p></div>
    <!-- <div id="button">
        <button id="play-button">Play</button>
      </div> -->
    </div>
  
    <!-- <ul class="pager">
      <li><a href="">Previous</a></li>
      <li><a href="">Next</a></li>
    </ul> -->
  
    <footer class="footer">
    </footer>
  
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.6.0/d3.min.js"></script>
    <script src='https://d3js.org/d3.v5.min.js'></script>
    <script>
    var yearcount = [2000, 2001, 2002, 2003];
    async function init() {
    d3.csv("https://unnatihasija1.github.io/GHGEmissionsData.csv").then(function(dataset){
    d = dataset;
    firstCall = true;
    var formatInteger = d3.format(",");
    var formatDecimal = d3.format(",.2f");
    makeCountriesDropdown(d);
    //linegraph(d);
    }
    )
  function makeCountriesDropdown(d) {
    var countriesDropDown = {};
                d.forEach(function(d) {
                    var countries = d.country;
                    countriesDropDown[countries] = [];
                    // yearcount.forEach(function(year) {
                    //     ghgvalue = d.filter(function(e){return (e.year==year && e.country==countries)})
                    //countriesDropDown[countries].push( +d["year"] );
                    //countriesDropDown[countries].push( +d["total_ghg"] );
                    // });
                    });
                    var dropdownChange = function() {
                    var newcountries = d3.select(this).property('value'),
                        newData = d.filter(function(e){return (e.country==newcountries)})
                    linegraph(newData);
                };

                // Get names of countries1, for dropdown
                var countries1 = Object.keys(countriesDropDown).sort();

                if(firstCall==true){
                
                var dropdown = d3.select("#scatter")
                    .insert("select", "svg")
                    .on("change", dropdownChange);

                    dropdown.selectAll("option")
                    .data(countries1)
                    .enter().append("option")
                    .attr("value", function (d) { return d; })
                    // .attr("height", 50)
                    // .attr("width", 100)
                    .text(function (d) {
                        return d[0].toUpperCase() + d.slice(1,d.length); // capitalize 1st letter
                    
                    }); 
                  }
                var initialData = d.filter(function(e){return (e.country== countries1[0] )})

            linegraph(initialData);
                
  }
  function linegraph(d) {  
  const yAccessor = (d) => d.total_ghg;
  const xAccessor = (d) => d.year;
  clearAll =[]
  d3.selectAll("g").data(clearAll).exit().remove()
  // Create a chart dimension by defining the size of the Wrapper and Margin

  let dimensions = {
    width: window.innerWidth * 0.6,
    height: 500,
    margin: {
      top: 115,
      right: 450,
      bottom: 50,
      left: 50,
    },
  };
  dimensions.boundedWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;
  dimensions.boundedHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom;

  // Draw Canvas
  
  const wrapper = d3
    .select("svg")

  // Create a Bounding Box
  //d3.select("svg").remove();
  const bounds = wrapper
    .append("g")
    //.attr("class", "scatterplot")
    .style(
      "transform",
      `translate(${dimensions.margin.left}px,${dimensions.margin.top}px)`
    );

  //Define Domain and Range for Scales
  const yScale = d3
    .scaleLinear()
    .domain(d3.extent(d, yAccessor))
    .range([dimensions.boundedHeight, 0]);

  const xScale = d3
    .scaleLinear()
    //.domain(d3.extent(d, xAccessor))
    //.domain(d3.extent(function(d) { return +d.year; }))
    .domain([2000,2018])
    //.domain(d3.extent(function(d,i) {return d.year[i]}))
    .range([0, dimensions.boundedWidth]);

  const lineGenerator = d3
    .line()
    .x((d) => xScale(xAccessor(d)))
    //.x(function(d, i) { return xScale(d); }) 
    .y((d) => yScale(yAccessor(d)))
    //.curve(d3.curve);

  // Convert X and Y into Path
  
  const line = bounds
    .append("path")
    .attr("d", lineGenerator(d))
    .attr("fill", "none")
    .attr("stroke", "green")
    .attr("stroke-width", 2);
    
  //Create X axis and Y axis
  // Generate Y Axis

  const yAxisGenerator = d3.axisLeft(yScale);
  const yAxis = bounds.append("g").call(yAxisGenerator);

  // Generate X Axis
  const xAxisGenerator = d3.axisBottom(xScale);
  const xAxis = bounds
    .append("g")
    //[2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]
    //.tickSize(19).tickFormat(d3.timeFormat('%Y')
    .call(xAxisGenerator.tickFormat(d3.format("d")))
    .style("transform", `translateY(${dimensions.boundedHeight}px)`);

  //Add a Chart Header

  wrapper
    .append("g")
    .style("transform", `translate(${50}px,${15}px)`)
    //.append("text")
    //.attr("class", "title")
    .attr("x", dimensions.width / 2)
    .attr("y", dimensions.margin.top / 2)
    //.attr("text-anchor", "middle")
    .text("GHG growth in 20 years ")
    .style("font-size", "30px")
    //.style("text-decoration", "underline");
    d3.select("svg")
                      .append("g")
                      .append("text")
                      .attr("y", 665)
                      .attr("x", 190)
                      
                      .attr("font-size", "15px")
                      .attr("text-anchor", "middle")
                      .text("Time in Years");

                    d3.select("svg")
                    .append("g")
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 50)
                    .attr("x", -280)
                    .attr("font-size", "15px")
                    .attr("text-anchor", "middle")
                    .text("GHG Emissions")
//   wrapper.selectAll(".dot")
//     .data(d)
//     .enter().append("circle") // Uses the enter().append() method
//     .attr("class", "dot") // Assign a class for styling
//     .attr("cx", function(d) { return xScale(d.year) })
//     .attr("cy", function(d) { return yScale(d.total_ghg) })
//     .attr("r", 2);
}

}

</script>
</body>
</html>
